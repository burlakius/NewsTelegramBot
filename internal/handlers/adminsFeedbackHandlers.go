package handlers

import (
	"database/sql"
	"news_telegram_bot/internal/config"
	"news_telegram_bot/pkg/databases/mariadb"
	redisdb "news_telegram_bot/pkg/databases/redis"
	"news_telegram_bot/pkg/translator"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"golang.org/x/text/message"
)

func adminAuthentication(chatID int64, printer *message.Printer, bot *tgbotapi.BotAPI) {
	responceMessage := tgbotapi.NewMessage(chatID, printer.Sprintf(
		"–ü—Ä–∏–≤—ñ—Ç —É—Å—ñ–º!\n–Ø - @%v, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π, —â–æ–± –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞–º —É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤.\n\n–Ø —Å–ø—ñ–≤–ø—Ä–∞—Ü—é—é —Ç—ñ–ª—å–∫–∏ –∑—ñ —Å–≤–æ—ó–º–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏, —Ç–æ–º—É –ø–æ–π–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é.\n\n–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å:",
		bot.Self.UserName,
	))

	if !mariadb.IsAdminChat(chatID) {
		err := redisdb.SetChatState(chatID, "WaitPassword")
		if err != nil {
			sendBotStorageError(chatID, bot)
			return
		}
		bot.Send(responceMessage)
	}
}

func setAdminsCommands(chatID int64, printer *message.Printer, bot *tgbotapi.BotAPI) {
	adminCommands := tgbotapi.NewSetMyCommandsWithScope(
		tgbotapi.NewBotCommandScopeChat(chatID),
		tgbotapi.BotCommand{
			Command:     "get_question",
			Description: printer.Sprintf("–í–∏–≤–µ—Å—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"),
		},
		tgbotapi.BotCommand{
			Command:     "set_news",
			Description: printer.Sprintf("–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∑–≤–∏—á–∞–π–Ω—É –Ω–æ–≤–∏–Ω—É"),
		},
		tgbotapi.BotCommand{
			Command:     "set_important_news",
			Description: printer.Sprintf("–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –≤–∞–∂–ª–∏–≤—É –Ω–æ–≤–∏–Ω—É"),
		},
		tgbotapi.BotCommand{
			Command:     "edit_news",
			Description: printer.Sprintf("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É"),
		},
		tgbotapi.BotCommand{
			Command:     "help",
			Description: printer.Sprintf("–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –∫–æ–º–∞–Ω–¥–∏"),
		},
	)

	bot.Send(adminCommands)
}

func receiveAdminPassword(message *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	defer redisdb.DoneChatState(message.Chat.ID)

	printer, err := translator.GetPrinterByChatID(message.Chat.ID)
	if err != nil {
		sendLanguageError(message.Chat.ID, bot)
		return
	}

	responceMessage := tgbotapi.NewMessage(message.Chat.ID, "")
	if message.Text == config.AdminPassword {
		responceMessage.Text = printer.Sprintf("–ü–∞—Ä–æ–ª—å –≤—ñ—Ä–Ω–∏–π ‚úÖ\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /help —è–∫—â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å, —è–∫ –∑—ñ –º–Ω–æ—é —Å–ø—ñ–≤–ø—Ä–∞—Ü—é–≤–∞—Ç–∏, –∞–±–æ —É –≤–∞—Å –Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥")
		mariadb.AddNewAdminChat(message.Chat.ID)
		defer setAdminsCommands(message.Chat.ID, printer, bot)
	} else {
		responceMessage.Text = printer.Sprintf("–ü–∞—Ä–æ–ª—å –Ω–µ–≤—ñ—Ä–Ω–∏–π ‚ùå")
		defer bot.Send(
			tgbotapi.LeaveChatConfig{ChatID: message.Chat.ID},
		)
	}

	bot.Send(responceMessage)
}

func helpForAdmins(message *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	printer, err := translator.GetPrinterByChatID(message.Chat.ID)
	if err != nil {
		sendLanguageError(message.Chat.ID, bot)
		return
	}

	responceMessage := tgbotapi.NewMessage(
		message.Chat.ID,
		printer.Sprintf("–Ø –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è–º —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è–º –Ω–æ–≤–∏–Ω–∞–º–∏.\n\n–û—Å—å –∫–æ–º–∞–Ω–¥–∏, —è–∫—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:\n\n/get_question - –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–¥–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è(–ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –≤–∏–¥–∞–ª–∏—Ç—å—Å—è –¥–æ —Ç–∏—Ö –ø—ñ—Ä, –ø–æ–∫–∏ –≤–∏ —Å–∞–º—ñ —Ü—å–æ–≥–æ –Ω–µ –∑–∞—Ö–æ—á–µ—Ç–µ)\n/set_news - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∑–≤–∏—á–∞–π–Ω—É –Ω–æ–≤–∏–Ω—É.\n/set_important_news - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –≤–∞–∂–ª–∏–≤—É –Ω–æ–≤–∏–Ω—É.\n\n!–í–∞–∂–ª–∏–≤—ñ –Ω–æ–≤–∏–Ω–∏ –≤—ñ–¥—Ä—ñ–∑–Ω—è—é—Ç—å—Å—è –≤—ñ–¥ –∑–≤–∏—á–∞–π–Ω–∏—Ö —Ç–∏–º, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–º–æ–∂–µ –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Å–æ–±—ñ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è –≤–∞–∂–ª–∏–≤–∏—Ö\n\n/edit_news - –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É.\n/help - –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ —ó—Ö –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.\n\n–Ø –≥–æ—Ç–æ–≤–∏–π –Ω–∞–¥–∞—Ç–∏ –≤–∞–º –≤—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∏. –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –æ–¥–Ω—É –∑ —Ü–∏—Ö –∫–æ–º–∞–Ω–¥, —ñ —è –±—É–¥—É —Ä–∞–¥–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏!"),
	)

	setAdminsCommands(message.Chat.ID, printer, bot)
	bot.Send(responceMessage)
}

func getQuestion(message *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	printer, err := translator.GetPrinterByChatID(message.Chat.ID)
	if err != nil {
		sendLanguageError(message.Chat.ID, bot)
		return
	}

	responceMessage := tgbotapi.NewMessage(message.Chat.ID, "")
	question, err := mariadb.GetQuestion()
	if err != nil {
		if err == sql.ErrNoRows {
			responceMessage.Text = printer.Sprintf("–ü–∏—Ç–∞–Ω—å –Ω–µ–º–∞—î...")
			bot.Send(responceMessage)
			return
		} else {
			sendBotStorageError(message.Chat.ID, bot)
			return
		}
	}

	sendQuestion(
		message.Chat.ID,
		question,
		printer,
		bot,
	)
}

func sendQuestion(chatID int64, question *mariadb.Question, printer *message.Printer, bot *tgbotapi.BotAPI) {
	aboutUserMessage := tgbotapi.NewMessage(chatID, printer.Sprintf("–ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥:\n\n%s\n%s", question.FirstName+" "+question.LastName, question.Username))
	bot.Send(aboutUserMessage)

	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(printer.Sprintf("–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ ‚úçÔ∏è"), "ReplyToQuestion"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(printer.Sprintf("–í–∏–¥–∞–ª–∏—Ç–∏ üóë"), "DeleteQuestion"),
		),
	)

	questionMessage := tgbotapi.NewCopyMessage(
		chatID,
		question.ChatID,
		question.MessageID,
	)

	questionMessage.ReplyMarkup = inlineKeyboard
	bot.Send(questionMessage)
}

func replyToQuestion(callbackQuery *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI) {
	redisdb.SetChatState(callbackQuery.Message.Chat.ID, "WaitAnswerMessage")

	printer, err := translator.GetPrinterByChatID(callbackQuery.Message.Chat.ID)
	if err != nil {
		sendLanguageError(callbackQuery.Message.Chat.ID, bot)
		return
	}

	changeQuestionMessageMenu(callbackQuery.Message, printer, bot)

	responceMessage := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, printer.Sprintf("–ß–µ–∫–∞—é –Ω–∞ –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å...\n\n–£–≤–∞–≥–∞! –í—Å—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥—É—Ç—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω—ñ, —è–∫ –≤—ñ–¥–ø–æ–≤—ñ—Ç—å –Ω–∞ –¥–∞–Ω–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è —ñ –±—É–¥—É—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"))
	bot.Send(responceMessage)
}

func changeQuestionMessageMenu(message *tgbotapi.Message, printer *message.Printer, bot *tgbotapi.BotAPI) {
	newInlineMenu := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(printer.Sprintf("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å ‚úÖ"), "SendAnswer"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(printer.Sprintf("–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå"), "cancel"),
		),
	)

	newQuestionMessage := tgbotapi.NewEditMessageReplyMarkup(message.Chat.ID, message.MessageID, newInlineMenu)

	bot.Send(newQuestionMessage)
}

func receiveReplyMessage(message *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	err := mariadb.SaveAnswerMessage(message.Chat.ID, message.MessageID)
	if err != nil {
		sendBotStorageError(message.Chat.ID, bot)
		return
	}

	printer, err := translator.GetPrinterByChatID(message.Chat.ID)
	if err != nil {
		sendLanguageError(message.Chat.ID, bot)
		return
	}

	responceMessage := tgbotapi.NewMessage(message.Chat.ID, printer.Sprintf("–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–±–µ—Ä–µ–∂–µ–Ω–∞..."))
	responceMessage.ReplyToMessageID = message.MessageID
	responceMessage.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(printer.Sprintf("–í–∏–¥–∞–ª–∏—Ç–∏"), "DeleteAnswerMessage"),
		),
	)
	bot.Send(responceMessage)
}

func deleteAnswerMessage(callbackQuery *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI) {
	printer, err := translator.GetPrinterByChatID(callbackQuery.Message.Chat.ID)
	if err != nil {
		sendLanguageError(callbackQuery.Message.Chat.ID, bot)
		return
	}

	err = mariadb.DeleteAnswerMessage(
		callbackQuery.Message.Chat.ID,
		callbackQuery.Message.ReplyToMessage.MessageID,
	)
	if err != nil {
		sendBotStorageError(callbackQuery.Message.Chat.ID, bot)
		return
	}

	editedMessage := tgbotapi.NewEditMessageText(
		callbackQuery.Message.Chat.ID,
		callbackQuery.Message.MessageID,
		printer.Sprintf("–í–∏–¥–∞–ª–µ–Ω–æ..."),
	)
	bot.Send(editedMessage)

	editedMessageMarkup := tgbotapi.NewEditMessageReplyMarkup(
		callbackQuery.Message.Chat.ID,
		callbackQuery.Message.MessageID,
		tgbotapi.NewInlineKeyboardMarkup(),
	)
	bot.Send(editedMessageMarkup)
}

func sendAdminAnswer(callbackQuery *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI) {
	redisdb.DoneChatState(callbackQuery.Message.Chat.ID)

	lang, err := redisdb.GetLanguage(callbackQuery.Message.Chat.ID)
	if err != nil {
		sendLanguageError(callbackQuery.Message.Chat.ID, bot)
		return
	}
	printer := translator.GetPrinter(lang)

	answerMessages, err := mariadb.GetAllAnswerMessages()
	if err != nil {
		sendBotStorageError(callbackQuery.Message.Chat.ID, bot)
		return
	}

	question, err := mariadb.GetQuestion()
	if err != nil {
		sendBotStorageError(callbackQuery.Message.Chat.ID, bot)
		return
	}

	titleMessage := tgbotapi.NewMessage(question.ChatID, printer.Sprintf("–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è!"))
	titleMessage.ReplyToMessageID = question.MessageID
	bot.Send(titleMessage)

	for chatID, messageID := range answerMessages {
		answerMessage := tgbotapi.NewCopyMessage(question.UserID, chatID, messageID)
		bot.Send(answerMessage)

		confirmMessage := tgbotapi.NewMessage(chatID, printer.Sprintf("–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞!"))
		confirmMessage.ReplyToMessageID = messageID
		bot.Send(confirmMessage)
	}

	err = mariadb.DeleteAllAnswerMessages()
	if err != nil {
		sendBotStorageError(callbackQuery.Message.Chat.ID, bot)
		return
	}

	err = mariadb.DeleteQuestionFirstMessage()
	if err != nil {
		sendBotStorageError(callbackQuery.Message.Chat.ID, bot)
		return
	}

	editedMessageMarkup := tgbotapi.NewEditMessageReplyMarkup(
		callbackQuery.Message.Chat.ID,
		callbackQuery.Message.MessageID,
		tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					printer.Sprintf("–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–Ω–∞..."),
					"_",
				),
			),
		),
	)
	bot.Send(editedMessageMarkup)
}

func deleteQuestion(callbackQuery *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI) {
	err := mariadb.DeleteQuestionFirstMessage()
	if err != nil {
		sendBotStorageError(callbackQuery.Message.Chat.ID, bot)
		return
	}

	lang, err := redisdb.GetLanguage(callbackQuery.Message.Chat.ID)
	if err != nil {
		sendLanguageError(callbackQuery.Message.Chat.ID, bot)
		return
	}
	printer := translator.GetPrinter(lang)

	editedMessage := tgbotapi.NewEditMessageReplyMarkup(
		callbackQuery.Message.Chat.ID,
		callbackQuery.Message.MessageID,
		tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(printer.Sprintf("–í–∏–¥–∞–ª–µ–Ω–æ..."), "_"),
			),
		),
	)

	bot.Send(editedMessage)

}
